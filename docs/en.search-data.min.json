[{"id":0,"href":"/documentation_cytech_google_cloud_computing/utilisation/transfert_fichier/","title":"Connection ssh et transfert de fichiers","parent":"Utilisation de la VM","content":"Connection en ssh par le site google cloud Le tableau de bord vous donne l\u0026rsquo;adresse ip actuelle de votre VM. Notez que cette adresse changera à chaque démarrage à moins que ne vous ne la configuriez statique.\nVous pouvez cliquez sur le bouton ssh afin d\u0026rsquo;y ouvrir un terminal. La section suivante détaille comment lancer vos propres commandes ssh depuis votre machine locale (ou comme il est écrit sur le site de gcp, depuis un outil tiers). C\u0026rsquo;est parfois nécessaire, par exemple pour créer des tunnels afin de copier des fichiers ou d\u0026rsquo;accéder au serveur jupyter.\nConnection en ssh depuis votre machine locale Il faut ajouter votre clé publique qui est sur votre machine locale dans le fichier authorized_keys de votre VM.\n Note: il n\u0026rsquo;est pas conseillé de copier directement votre clé publique dans le fichier authorized_keys car google utilise des processus internes qui ré-écrivent et écrasent régulièrement ce fichier.\n Une solution est d\u0026rsquo;ajouter votre clé publique dans les métadonnées de votre VM.\n Dans \u0026ldquo;Compute Engine -\u0026gt; Instance de VM -\u0026gt; Métadonnées\u0026rdquo; Séléctionnez l\u0026rsquo;onglet \u0026ldquo;Clés SSH\u0026rdquo; puis le bouton \u0026ldquo;Modifier\u0026rdquo;    Copiez l\u0026rsquo;intégralité du fichier présent sur votre machine locale avec pour chemin ~/.ssh/id_rsa.pub\nSi ce fichier n\u0026rsquo;existe pas, vous pouvez le générer avec la commande ssh-keygen -t rsa\nFormattez ensuite l\u0026rsquo;affichage de votre clé pour qu\u0026rsquo;elle ressemble à:\nssh-rsa token_long_list_of_characters google-ssh {\u0026quot;userName\u0026quot;:\u0026quot;your_login\u0026quot;,\u0026quot;expireOn\u0026quot;:\u0026quot;2023-02-10T23:16:51+0000\u0026quot;}  Vérifiez ensuite que votre clé publique est bien présente sur la VM dans le fichier ~/.ssh/authorized_keys  Uploadez des fichiers de sa machine locale vers la VM Par ssh Pour copier MON_FICHIER de la machine locale vers la VM\nscp /chemin_local/vers/MON_FICHIER login@address_ip_externe:/chemin/sur/la/VM "},{"id":1,"href":"/documentation_cytech_google_cloud_computing/manual_configuration/tensorflow/","title":"Installation de tensorflow","parent":"Configuration manuelle de la machine virtuelle","content":"Commençons par la librairie Cuda qui permettra à Tensorflow d\u0026rsquo;utiliser le GPU.\ninstallation de Cuda Clikez sur le bouton ssh afin d\u0026rsquo;ouvrir un terminal sur votre machine virtuelle.\nSélectionner un mode de téléchargement sur le site de cuda. A l\u0026rsquo;heure actuelle, tensorflow a été compilé avec la version 11.0 de cuda. Nous choisirons donc cette version.\n  Ensuite, exécutez les commandes suivantes:\nsudo apt udpate wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget http://developer.download.nvidia.com/compute/cuda/11.0.2/local_installers/cuda-repo-ubuntu2004-11-0-local_11.0.2-450.51.05-1_amd64.deb sudo dpkg -i cuda-repo-ubuntu2004-11-0-local_11.0.2-450.51.05-1_amd64.deb sudo apt-key add /var/cuda-repo-ubuntu2004-11-0-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Ajoutez les lignes suivantes dans le fichier ~/.bashrc\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64 export PATH=$PATH:/usr/local/cuda/bin/ Puis exécutez la commande suivante:\nsource .bashrc Ensuite, installez cudnn. Il vous sera demandé de créer un compte. Vous pourrez ensuite télécharger les fichiers .deb et utiliser la commande dpkg pour les installer.\nsudo dpkg -i libcudnn8_8.0.5.39-1+cuda11.0_amd64.deb sudo dpkg -i libcudnn8-dev_8.0.5.39-1+cuda11.0_amd64.deb Pour vérifier que l\u0026rsquo;installation a fonctionné, nous pouvons tester la commande nvidia-smi:\n$ nvidia-smi Wed Feb 3 10:20:31 2021 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 460.32.03 Driver Version: 460.32.03 CUDA Version: 11.2 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |===============================+======================+======================| | 0 Tesla K80 Off | 00000000:00:04.0 Off | 0 | | N/A 71C P8 35W / 149W | 13MiB / 11441MiB | 0% Default | | | | N/A | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=============================================================================| | 0 N/A N/A 937 G /usr/lib/xorg/Xorg 8MiB | | 0 N/A N/A 1081 G /usr/bin/gnome-shell 3MiB | +-----------------------------------------------------------------------------+ Une information intéressante est la quantité de mémoire occupée 12MiB / 11441MiB. Cette information est utile lorsque nous entraînons nos modèles et pour vérifier si notre gpu est utilisé ou pas.\nEnvironnement Anaconda  Récupérez l\u0026rsquo;installeur d\u0026rsquo;Anaconda sur la page des téléchargements. Choisissez celui pour linux en 64 bits et téléchargez-le, par exemple avec:  wget https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh  bash Anaconda3-5.1.0-Linux-x86_64.sh  utilisez les défauts et accepter l\u0026rsquo;initialisation\nDo you wish the installer to initialize Anaconda3 by running conda init? [yes|no] [no] \u0026gt;\u0026gt;\u0026gt; yes   Redémarrez votre shell ou rechargez votre fichier avec source ~/.bashrc\n  Installez tensorflow depuis votre environnement conda\n  (base) pandregay@instance-1:~$ pip install tensorflow  Testez que tensorflow a accès à votre gpu:  import tensorflow as tf physical_devices = tf.config.list_physical_devices(\u0026#39;GPU\u0026#39;) [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]  "},{"id":2,"href":"/documentation_cytech_google_cloud_computing/docker/","title":"tensorflow and Jupyter in Docker","parent":"","content":""},{"id":3,"href":"/documentation_cytech_google_cloud_computing/manual_configuration/jupyter/","title":"Jupyter notebook","parent":"Configuration manuelle de la machine virtuelle","content":"Vous pouvez au choix configurez l\u0026rsquo;adresse IP et les parefeux de votre VM ou utliser un tunnel ssh.\nJupyter notebook : option1 : tunnel ssh  Pré-requis : ajouter sa clé publique à la VM pour pourvoir s\u0026rsquo;y connecter en ssh depuis votre machine locale.\n Ouvrez un tunnel ssh connectant votre machine au localhost de votre VM.\nssh -X -L 8888:localhost:8888 pandregay@adresse_ip_externe Notez que le numéro du port doit correspondre à celui sur lequel votre Jupyter tourne.\nDepuis la VM, lancez votre jupyter (si vous ne l\u0026rsquo;avez pas déjà fait par le biais de votre image docker):\njupyter-notebook --no-browser --port=8888 ... To access the notebook, open this file in a browser: file:///home/pandregay/.local/share/jupyter/runtime/nbserver-18405-open.html Or copy and paste one of these URLs: http://localhost:8888/?token=2703d92e3badf239641b349d2f5c4e9828cf3968f3c0926c  Copiez l\u0026rsquo;adresse affichée par la commande dans votre navigateur en incluant le token:\nhttp://localhost:8888/?token=2703d92e3badf239641b349d2f5c4e9828cf3968f3c0926c Jupyter noteboook option2 : configuration des pare-feu et addresse IP statique Configuration des firewalls pour Jupyter Sur le site de Google Cloud platform, allez dans Réseaux VPC, \nCréer une IP externe addresse IP Externe :\n Passez de éphémère à static Mettre un nom sur l\u0026rsquo;addresse IP  Ajouter une règle firewall Dans pare-feu  Vérifiez default-allow-ssh =\u0026gt; tcp:22 Dans cible choissisez \u0026ldquo;toutes les instances du réseau\u0026rdquo; Dans plage d\u0026rsquo;adresse IP : 0.0.0.0/0 Protocole et port spécifié: TCP 22: 8889  installation de jupyter sur la VM  jupyter notebook --ip=0.0.0.0 --port=8889 --no-browser \u0026amp;  Accéder au Jupyter :\n copier l\u0026rsquo;adresse à partir de \u0026ldquo;?token=\u0026hellip;..\u0026rdquo; Ajouter devant le \u0026ldquo;?\u0026rdquo; l\u0026rsquo;adresse externe de votre VM (dans instance VM) et :8889.n  L\u0026rsquo;url que vous entrez dans le navigateur doit avoir la forme : http://adresse_ip_externe:8889/?token=votre_token\n"},{"id":4,"href":"/documentation_cytech_google_cloud_computing/pre_configured_vm/","title":"Machine virtuelle pré-configurée","parent":"","content":"Il est possible d\u0026rsquo;installer une VM pré-configurée contenant Cuda, tensorflow, et la plupart des librairies utiles pour le Deep learning.\nhttps://console.cloud.google.com/ai/platform/notebooks/list/instances avec les options:\n Select 1 gpu tesla \u0026ldquo;Install NVIDIA GPU driver automatically for me\u0026rdquo;  Cependant, cette VM vous coûte de l\u0026rsquo;argent même quand elle est éteinte. Vous pouvez choisir de la supprimer après chaque utilisation, mais ceci vous oblige à regénérer tout votre environnement à chaque fois ainsi que les données que vous souhaitez y stocker.\nPour conserver les données, vous pouvez faire une sauvegarde des disques et éteindre ensuite la VM. Pour reprendre il faudra cliquer sur le snapshot pour recréer un disque à partir de ce dernier.\n"},{"id":5,"href":"/documentation_cytech_google_cloud_computing/utilisation/","title":"Utilisation de la VM","parent":"","content":""},{"id":6,"href":"/documentation_cytech_google_cloud_computing/troubleshooting/","title":"Troubleshooting","parent":"","content":"Problème de quotas  Passez la limite de \u0026ldquo;Compute Engine API GPUs (all regions)\u0026rdquo; à 1:\n IAM et admin =\u0026gt; quotas Cliquez le champ Filter table -\u0026gt; limit name -\u0026gt; faites déroulez la liste jusqu\u0026rsquo;à trouver GPU all regions. Sélectionnez-le, un bandeau doit apparaître à droite de l\u0026rsquo;écran. Cliquez \u0026ldquo;global\u0026rdquo; éditez les quotas  faire une demande pour le passer à 1. (parfois 15 min d\u0026rsquo;attente avant confirmation)  "},{"id":7,"href":"/documentation_cytech_google_cloud_computing/","title":"","parent":"","content":"Vous avez différentes possibilités pour utiliser tensorflow sur votre machine virtuelle :\n Configuration manuelle: Installation manuelle de toutes les librairies (drivers nvidia, librairies cuda, environnement anaconda, etc) Image docker (recommandé): Téléchargement d\u0026rsquo;une image docker contenant tensorflow et qui ne nécessite que les drivers nvidia pour fonctionner. Cependant vous devrez maîtriser l\u0026rsquo;outil docker si vous souhaitez modifier cette image et ajouter de nouveaux modules. Étant donné l\u0026rsquo;universalité actuelle de docker, c\u0026rsquo;est certainement une bonne idée de saisir une occasion pour maîtriser cet outil Machine virtuelle pré-configuré : Cette option est la plus chère, et vous devez prendre garde à supprimer votre VM à chaque utilisation et à sauvegarder manuellement les données que vous souhaitez conserver.  "},{"id":8,"href":"/documentation_cytech_google_cloud_computing/categories/","title":"Categories","parent":"","content":""},{"id":9,"href":"/documentation_cytech_google_cloud_computing/manual_configuration/","title":"Configuration manuelle de la machine virtuelle","parent":"","content":""},{"id":10,"href":"/documentation_cytech_google_cloud_computing/manual_configuration/vm_creation/","title":"Création de la VM","parent":"Configuration manuelle de la machine virtuelle","content":"Dans cette partie, nous allons installé une machine google cloud\nCréer l\u0026rsquo;instance du serveur Google Cloud Création de la VM  Compute engine =\u0026gt; instance VM =\u0026gt; Créer Région : Europe-west1 (Belgique) Zone : europe-west1-b Config de machine =\u0026gt; Série : N1 Type de machine : n1-standard-8 (30go)  Dans la liste déroulange \u0026ldquo;Plate-forme du processeur et GPU\u0026rdquo;\n  Ajouter un GPU : NVIDIA Tesla K80\n  Image ubuntu 20.04 avec un disque dur de 200Go\n  Cocher Autoriser le trafic HTTP et HTTPS\n  Reportez-vous à Augmenter les quotas si vous rencontrez le message d\u0026rsquo;erreur \u0026ldquo;\u0026hellip; does not have enough resources available to fulfill the request. Try a different zone, or try again later. \u0026quot;  "},{"id":11,"href":"/documentation_cytech_google_cloud_computing/docker/docker/","title":"Installation de Tensorflow avec docker","parent":"tensorflow and Jupyter in Docker","content":"Une image docker fournit un environnement pré-installé et fonctionnel. Le principe général se situe entre la machine virtuelle et l\u0026rsquo;environnement virtuel.\nÉtant donné l\u0026rsquo;usage actuel universel de docker, c\u0026rsquo;est probablement une bonne idée de prendre du temps pour effectuer cette installation.\nVous devez avoir au préablable créé votre VM.  Depuis votre VM connectez-vous en ssh et installez docker sur votre VM\nL\u0026rsquo;installation consiste à ajouter les drivers nvidia, puis à télécharger un conteneur docker qui contiendra la librairie tensorflow avec les dépendances cuda.\nInstallation des drivers nvidia: sudo apt-get install ubuntu-drivers-common ubuntu-drivers devices  == /sys/devices/pci0000:00/0000:00:04.0 == modalias : pci:v000010DEd0000102Dsv000010DEsd0000106Cbc03sc02i00 vendor : NVIDIA Corporation model : GK210GL [Tesla K80] driver : nvidia-driver-450-server - distro non-free driver : nvidia-driver-460 - distro non-free recommended driver : nvidia-driver-390 - distro non-free driver : nvidia-driver-418-server - distro non-free driver : nvidia-driver-450 - distro non-free driver : xserver-xorg-video-nouveau - distro free builtin  Nous installons la version recommandée (ici la 460):\nsudo apt install nvidia-driver-460 Installation du container nvidia Créer un fichier nvidia-container-runtime-script.sh avec le contenu suivant:\ncurl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | \\ sudo apt-key add - distribution=$(. /etc/os-release;echo $ID$VERSION_ID) curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list sudo apt-get update Puis installez le conteneur nvidia\nsudo apt-get install nvidia-container-runtime sudo systemctl restart docker Re-démarrez votre machine.\nInstallation de l\u0026rsquo;image docker Des fichiers Dockerfile sont disponibles sur le github de tensorflow:\nsudo apt update sudo apt install git git clone https://github.com/tensorflow/tensorflow.git cd tensorflow/tensorflow/tools/dockerfiles/ sudo docker build -f ./dockerfiles/gpu-jupyter.Dockerfile -t tf .  ces commandes doivent être exécutées depuis le repertoire tensorflow/tools/dockerfiles car elles supposent que certains fichiers (comme le fichier bashrc) sont disponibles dans le répertoire courant.\n La dernière ligne est la commande qui construit votre image sous le nom de tf. Pour lancer le notebook\nsudo docker run -it --gpus all --rm -v $(realpath ~/notebooks):/tf/notebooks -p 8888:8888 tf:latest À présent, votre jupyter est lancé sur le port 8888 et l\u0026rsquo;adresse localhost de la VM. Le répertoire qui contient vos notebook est indiqué dans la commande. Dans cet exemple, il s\u0026rsquo;agit de ~/notebooks. Notez que l\u0026rsquo;environnement docker n\u0026rsquo;a pas accès aux autres répertoires de votre VM.\nConsultez cette section pour accéder au jupyter de votre VM.\nVous pouvez aussi télécharger directement à partir de la commande run. L\u0026rsquo;avantage de passer par le fichier .Dockerfile est que vous pouvez l\u0026rsquo;adapter pour y ajouter d\u0026rsquo;autres librairies dont vous pourriez avoir besoin.\nsudo docker run -it --gpus all --rm -v $(realpath ~/notebooks):/tf/notebooks -p 8888:8888 tf:latest   Ajout de modules supplémentaires L\u0026rsquo;image docker et les libraires qu\u0026rsquo;elle contient sont spécifiées dans les fichiers *.Dockerfile.\nIl est indiqué dans le README du github de tensorflow qu\u0026rsquo;il n\u0026rsquo;est pas conseillé de modifier directement ces fichiers Dockerfile. Il est proposé à la place de modifier un ficher de configuration et d\u0026rsquo;utiliser un script python pour générer les fichiers Dockerfile.\n"},{"id":12,"href":"/documentation_cytech_google_cloud_computing/tags/","title":"Tags","parent":"","content":""}]